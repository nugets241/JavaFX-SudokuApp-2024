package computationlogic;

//Collection of static functions which may be used to determine events and new Game states.

import constants.GameState;
import constants.Rows;
import problemdomain.SudokuGame;

import java.util.*;

import static problemdomain.SudokuGame.GRID_BOUNDARY;

/**
 * The GameLogic class provides a static method to generate a new Sudoku game.
 */
public class GameLogic {

    /**
     * Generates a new Sudoku game with a new game grid.
     *
     * This method creates a new instance of the SudokuGame class with a GameState
     * of NEW and a new game grid.
     * The new game grid is generated by the getNewGameGrid method of the
     * GameGenerator class.
     *
     * @return A new SudokuGame instance representing the new game.
     */
    public static SudokuGame getNewGame() {
        int[][] newGameGrid = GameGenerator.getNewGameGrid();
        boolean[][] disabledTiles = GameGenerator.getDisabledTiles(newGameGrid);
        return new SudokuGame(
                GameState.NEW,
                newGameGrid,
                disabledTiles);
    }

    /**
     * Checks the current state of the Sudoku game.
     *
     * This method checks if the Sudoku game is invalid or if any tiles are not
     * filled.
     * If either of these conditions are true, the game is considered active.
     * If neither of these conditions are true, the game is considered complete.
     *
     * @param grid The current state of the Sudoku game.
     * @return The current GameState of the Sudoku game.
     */
    public static GameState checkForCompletion(int[][] grid) {
        if (sudokuIsInvalid(grid))
            return GameState.ACTIVE;
        if (tilesAreNotFilled(grid))
            return GameState.ACTIVE;
        return GameState.COMPLETE;
    }

    /**
     * Checks if any tiles in the Sudoku game are not filled.
     *
     * This method traverses the Sudoku grid and checks if any tiles are not filled
     * (i.e., are 0).
     * If any tiles are not filled, the method returns true.
     * If all tiles are filled, the method returns false.
     *
     * @param grid The current state of the Sudoku game.
     * @return True if any tiles are not filled, false otherwise.
     */
    public static boolean tilesAreNotFilled(int[][] grid) {
        for (int xIndex = 0; xIndex < GRID_BOUNDARY; xIndex++) {
            for (int yIndex = 0; yIndex < GRID_BOUNDARY; yIndex++) {
                if (grid[xIndex][yIndex] == 0)
                    return true;
            }
        }
        return false;
    }

    /**
     * Checks if the current state of the Sudoku game is invalid.
     * The state is considered invalid if any of the rows, columns, or squares are
     * invalid.
     *
     * @param grid The current state of the Sudoku game.
     * @return true if the Sudoku game state is invalid, false otherwise.
     */
    public static boolean sudokuIsInvalid(int[][] grid) {
        if (rowsAreInvalid(grid))
            return true;
        if (columnsAreInvalid(grid))
            return true;
        if (squaresAreInvalid(grid))
            return true;
        else
            return false;
    }

    /**
     * Checks if any of the squares in the Sudoku game are invalid.
     * The game is divided into 9 squares (3x3 sections), and this method checks
     * each one.
     *
     * @param grid The current state of the Sudoku game.
     * @return true if any of the squares are invalid, false otherwise.
     */
    public static boolean squaresAreInvalid(int[][] grid) {
        // top three squares
        if (rowOfSquaresIsInvalid(Rows.TOP, grid))
            return true;

        // middle three
        if (rowOfSquaresIsInvalid(Rows.MIDDLE, grid))
            return true;

        // bottom three
        if (rowOfSquaresIsInvalid(Rows.BOTTOM, grid))
            return true;

        return false;
    }

    /**
     * Checks if a row of squares in the Sudoku grid is invalid.
     * The Sudoku grid is divided into 9 squares (3x3 sections), and this method
     * checks
     * each square in a specific row (TOP, MIDDLE, BOTTOM).
     *
     * @param value The row of squares to check. This should be one of the values
     *              from the Rows enum (TOP, MIDDLE, BOTTOM).
     * @param grid  The current state of the Sudoku game.
     * @return true if any square in the specified row is invalid, false otherwise.
     */
    private static boolean rowOfSquaresIsInvalid(Rows value, int[][] grid) {
        switch (value) {
            case TOP:
                // x FIRST = 0
                if (squareIsInvalid(0, 0, grid))
                    return true;
                // x SECOND = 3
                if (squareIsInvalid(0, 3, grid))
                    return true;
                // x THIRD = 6
                if (squareIsInvalid(0, 6, grid))
                    return true;

                // Otherwise squares appear to be valid
                return false;

            case MIDDLE:
                if (squareIsInvalid(3, 0, grid))
                    return true;
                if (squareIsInvalid(3, 3, grid))
                    return true;
                if (squareIsInvalid(3, 6, grid))
                    return true;
                return false;

            case BOTTOM:
                if (squareIsInvalid(6, 0, grid))
                    return true;
                if (squareIsInvalid(6, 3, grid))
                    return true;
                if (squareIsInvalid(6, 6, grid))
                    return true;
                return false;

            default:
                return false;
        }
    }

    /**
     * Checks if a 3x3 square in the Sudoku grid is invalid.
     * A square is considered invalid if it contains repeated values.
     *
     * @param yIndex The starting y-index of the square.
     * @param xIndex The starting x-index of the square.
     * @param grid   The current state of the Sudoku game.
     * @return true if the square is invalid (contains repeated values), false
     *         otherwise.
     */
    public static boolean squareIsInvalid(int yIndex, int xIndex, int[][] grid) {
        int yIndexEnd = yIndex + 3;
        int xIndexEnd = xIndex + 3;

        List<Integer> square = new ArrayList<>();

        while (yIndex < yIndexEnd) {

            while (xIndex < xIndexEnd) {
                square.add(
                        grid[xIndex][yIndex]);
                xIndex++;
            }

            // reset x to original value by subtracting by 2
            xIndex -= 3;

            yIndex++;
        }

        // if square has repeats, return true
        if (collectionHasRepeats(square))
            return true;
        return false;
    }

    /**
     * Checks if any column in the Sudoku grid is invalid.
     * A column is considered invalid if it contains repeated values.
     *
     * @param grid The current state of the Sudoku game.
     * @return true if any column is invalid (contains repeated values), false
     *         otherwise.
     */
    public static boolean columnsAreInvalid(int[][] grid) {
        for (int xIndex = 0; xIndex < GRID_BOUNDARY; xIndex++) {
            List<Integer> row = new ArrayList<>();
            for (int yIndex = 0; yIndex < GRID_BOUNDARY; yIndex++) {
                row.add(grid[xIndex][yIndex]);
            }

            if (collectionHasRepeats(row))
                return true;
        }

        return false;
    }

    /**
     * Checks if any row in the Sudoku grid is invalid.
     * A row is considered invalid if it contains repeated values.
     *
     * @param grid The current state of the Sudoku game.
     * @return true if any row is invalid (contains repeated values), false
     *         otherwise.
     */
    public static boolean rowsAreInvalid(int[][] grid) {
        for (int yIndex = 0; yIndex < GRID_BOUNDARY; yIndex++) {
            List<Integer> row = new ArrayList<>();
            for (int xIndex = 0; xIndex < GRID_BOUNDARY; xIndex++) {
                row.add(grid[xIndex][yIndex]);
            }

            if (collectionHasRepeats(row))
                return true;
        }

        return false;
    }

    /**
     * Checks if a collection of integers contains any repeated values.
     * This is used to check if a row, column, or square in the Sudoku game is
     * invalid.
     *
     * @param collection The collection of integers to check.
     * @return true if the collection contains repeated values, false otherwise.
     */
    public static boolean collectionHasRepeats(List<Integer> collection) {
        // count occurrences of integers from 1-GRID_BOUNDARY. If Collections.frequency
        // returns a value greater than 1,
        // then the square is invalid (i.e. a non-zero number has been repeated in a
        // square)
        for (int index = 1; index <= GRID_BOUNDARY; index++) {
            if (Collections.frequency(collection, index) > 1)
                return true;
        }

        return false;
    }
}
